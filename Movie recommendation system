import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Load your movie rating dataset
df = pd.read_csv('path_to_dataset.csv')

# Preprocess the data
df.columns = ['user', 'item', 'rating', 'timestamp']
df.drop('timestamp', axis=1, inplace=True)

# Create the user-item matrix
user_item_matrix = df.pivot(index='user', columns='item', values='rating').fillna(0)

# Split the dataset into training and testing sets
train_data, test_data = train_test_split(df, test_size=0.2, random_state=42)

# Create user-item matrices for train and test sets
train_matrix = user_item_matrix.copy()
for row in test_data.itertuples():
    train_matrix.at[row.user, row.item] = 0

test_matrix = user_item_matrix.copy()
for row in train_data.itertuples():
    test_matrix.at[row.user, row.item] = 0

# Use cosine similarity
item_similarity = cosine_similarity(train_matrix.T)
item_similarity_df = pd.DataFrame(item_similarity, index=user_item_matrix.columns, columns=user_item_matrix.columns)

# Predict ratings
predicted_ratings = train_matrix.dot(item_similarity_df) / np.array([np.abs(item_similarity_df).sum(axis=1)])

# Calculate RMSE for test set
def rmse(pred, actual):
    pred = pred[actual.nonzero()].flatten()
    actual = actual[actual.nonzero()].flatten()
    return np.sqrt(((pred - actual) ** 2).mean())

test_matrix_values = test_matrix.values
rmse_value = rmse(predicted_ratings.values, test_matrix_values)
print(f"RMSE: {rmse_value}")

# Recommend movies for a specific user
user_id = 'user_id'  # Replace with actual user ID
user_idx = user_item_matrix.index.get_loc(user_id)
user_predicted_ratings = predicted_ratings.iloc[user_idx]

# Get top N movie recommendations for the user
top_n = 10
recommended_movies = user_predicted_ratings.sort_values(ascending=False).head(top_n)

# Print the recommended movies
print(f"\nTop {top_n} Movie Recommendations for User {user_id}:\n")
for movie_id, est_rating in recommended_movies.items():
    print(f"Movie ID: {movie_id}, Estimated Rating: {est_rating}")
